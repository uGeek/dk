#!/bin/bash
#
#  dk
#
VERSION="v0.9.9.8   21/12/2022"



SOFT=$(diff -q  /usr/bin/dk <(wget -q -O- https://raw.githubusercontent.com/uGeek/dk/master/dk 2>/dev/null))

if [ "$(cat ~/.config/dk/last.log 2>/dev/null)" != "$(date +"%Y%m%d")" ] 
then
mkdir -p ~/.config/dk    
echo $(date +"%Y%m%d") >  ~/.config/dk/last.log  2>/dev/null
if [ "$SOFT" = "" ]
then
echo "" 2>/dev/null
else
echo
echo -e "\e[31mHay una nueva actualización de la aplicación\e[0m \e[1mdk\e[0m"
echo -en "¿Quieres actualizar ahora? [si/No]: "
read RESPONSE
if [ $RESPONSE == si ] || [ $RESPONSE == SI ] || [ $RESPONSE == s ] || [ $RESPONSE == S ]
then
sudo curl -L https://raw.githubusercontent.com/uGeek/dk/master/dk \
          -o /usr/bin/dk && sudo chmod +x /usr/bin/dk
clear	  
echo -e "\n\t\e[1mdk.\e[0m \e[92mVersión $(wget -q -O- https://raw.githubusercontent.com/uGeek/dk/master/dk | grep "^VERSION=" | cut -d "=" -f2 | sed s'|"||'g) actualizada con éxito! \e[0m\n"  
else 
echo ""
fi
exit 0
fi
fi



if [ ! -f ~/.config/dk/dk.conf ]; then
    while true; do
        echo ""
        read -rp "El archivo de configuración no está creado, ¿Quieres crearlo ahora? (s/n) " yn
        case "${yn}" in
            [Ss]* ) mkdir -p  ~/.config/dk/
		    echo -en "\n Escribe la ruta completa del directorio donde tienes o quieres guardar tus docker-dotfile \n\n\t Ejemplo: /home/usuario/dk: "
		    read RUTA ; echo "RUTA_DOCKER_DOTFILE='"$RUTA"'" > ~/.config/dk/dk.conf
		    echo -en "\n ¿Que editor de texto quieres utilizar? \n\n\t Ejemplo: vim: "
		    read EDITOR ; echo "EDITOR='"$EDITOR"'" >> ~/.config/dk/dk.conf
		    mkdir -p $RUTA
		    break;;
            [Nn]* ) exit;;
            * ) echo "Please answer y or n";;
        esac
    done
fi

source ~/.config/dk/dk.conf

if [ "$1" = "-v" ] || [ "$1" = "--version" ] 
then
echo "$VERSION"
exit
fi

if [ "$1" = "-h" ] || [ "$1" = "--help" ] || [ "$1" = "h" ] || [ "$1" = "" ]
then
echo "
Modo de empleo: dk [OPCIONES]

dk   cli                 -> Menú para crear un contendor guardado con docker cli
dk   cliv                -> Menú para ver un contendor guardado con docker o docker-compose (show, see) 
dk   a                   -> Automontaje de todos los dockers de un grupo (add)
dk   dc                  -> Montar un docker-compose (docker-compose up -d)
dk   dcr                 -> Montar un docker-compose guardado (remote)
dk   dcd                 -> Detener con docker-compose y volumenes (docker-compose down)
dk   dcdr                -> Detener con docker-compose guardado (remote)
dk   dcvl                -> Eliminar con docker-compose y volumenes (docker-compose down -v) 
dk   dcv                 -> Ver un docker-compose y editarlo
dk   dccp                -> Copiar un docker-compose existente, por otro de otro nombre
dk   dcl                 -> Docker-Compose logs
dk   dcrm                -> Eliminar docker-compose detenidos
dk   dcrrm               -> Eliminar plantilla en directorio dk, docker-compose     
dk   dcn                 -> Guarda un nuevo docker-compose (new)
dk   clin                -> Guarda un nuevo docker
dk   i                   -> Imagenes listadas por creación (image)
dk   rc                  -> Camviar nombre contenedor (rename docker)
dk   ri                  -> Cambiar nombre de imagen (rename image)
dk   u, up, start        -> Lista dockers con su número para iniciar (up)
dk   d, down, stop       -> Lista dockers corriendo, con su número para detener (down)
dk   r, restart          -> Reiniciando docker  
dk   d -a, stop -a, ...  -> Detener todos los contenedores 
dk   e, exec             -> Entrar dentro del contenedor
dk   eb, execb           -> Entrar dentro del contenedor con bash
dk   ip                  -> Conoce la ip de un docker
dk   ls ip, ip -a        -> Listar todas las ip's
dk   list ip             -> Listar todas las ip's de un modo distinto
dk   net, red            -> Listar todas las redes
dk   ls, ps              -> Dockers que están corriendo y sus puertos (list)
dk   ls -a, ps -a        -> Todos los Dockers disponibles (list all)
dk   st, store           -> Descarga Dockers de la store de dk
dk   rm                  -> Lista contenedores con su número para ser borrado (remove)
dk   drm                 -> Lista contenedores con su número para ser detenido y borrado (down and remove)
dk   rmi                 -> Lista imagenes con su número para ser borradas (remove image)
dk   b                   -> Construir una imágen a partir de un Dockerfile
dk   c                   -> Crear un docker a partir de una imagen
dk   save                -> Exportar imagen en el directorio actual
dk   load                -> Cargar Imagen del directorio actual
dk   sload               -> Buscar imagen del directorio actual, filtrando por palabra
dk   l, log              -> Lista contendores con su número, para ver los logs
dk   s, stats            -> Ver consumo de cpu, memoria,... de todos los contenedores
dk   sp, statsp          -> Ver consumo de cpu, memoria (porcentaje),... de todos los contenedores
dk   s c, stats c        -> Lista contenedores con su número para ver el consumo de cpu, memoria,...
dk   ss, stats sort      -> Ordena contenedores por cpu, memoria, ...
dk   p, prune            -> Borrar todos los Contenedores, imágenes, redes, que esten detenidos
dk   install ubuntu      -> Instalalar Docker y docker-compose en Ubuntu
dk   install debian      -> Instalalar Docker y docker-compose en Debian
dk   install armhf       -> Instalalar Docker y docker-compose en armhf (Raspberry)
dk   install arm64       -> Instalalar Docker y docker-compose en arm64
dk   install             -> Instalalar Docker y docker-compose para derivadas de Debian desde los repositorios
dk   not  [server]       -> Enviar notificaciones de contenedores que se levanten o detengan
dk   prompt              -> Utilizar comandos en bucle con un prompt
dk  -h, h, --help        -> Ayuda (help)


  Ejemplos:
 
    dk u                  ->  Iniciar contenedor
    dk u web              ->  Iniciar contenedor, muestra lista filtrada por web

   Esta opción de filtrado funciona con dentener contenedores, listar imágenes, redes,...                

    dk b                  ->  Construir un Dockerfile
    dk b ugeek/webdav:arm ->  Construir un Dockerfile con el nombre ugeek/webdav:arm

   
dk "$VERSION"
 Copyright (C) 2020 Angel. uGeek
 ugeekpodcast@gmail.com" | grep "$2"
exit
fi

if [ "$1" = "st" ] || [ "$1" = "store" ]
then
SVN=$(dpkg --list | grep -i subversion)
if [ "$SVN" = "" ]
then
echo "Para poder descargar dockers desde el dk store, necesitas instalar el paquete subversion"
echo "En derivadas de debian, se instala con:"
echo "   sudo apt install subversion"
else
svn export https://github.com/uGeek/dk/trunk/store $RUTA_DOCKER_DOTFILE/store --force
fi    
exit
fi


if [ "$1" = "a" ]
then
clear
echo ""
echo "Listado de grupo de dockers disponibles"
echo ""
echo ""
ls -1F $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g
echo ""
echo -n "Selecciona el grupo de dockers de automontaje: " ; read GRUPO
echo " "
cat $RUTA_DOCKER_DOTFILE/$GRUPO/*.docker > ~/.config/dk/dk.automount
/bin/bash ~/.config/dk/dk.automount
exit
fi



if [ "$1" = "b" ] 
then
clear
echo -en "¿Que nombre de imagen quieres utilizar?: "
read 	NOMBRE
echo ""
echo ""
docker build -t $2$NOMBRE .
exit
fi


if [ "$1" = "c" ]
then
clear
echo -en "Nombre: "
read NOMBRE
echo -en "Puertos: "
read PUERTOS
echo -en "Volumenes: "
read VOLUMENES
echo -en "Imagen: "
read IMAGEN
docker create --name=$NOMBRE $PUERTOS $VOLUMENES $IMAGEN
echo ""
exit
fi


if [ "$1" = "i" ]
then
echo "--------"
echo "IMAGENES"
echo "--------"
docker images --format 'table {{.CreatedSince}}\t{{.Repository}}:{{.Tag}}\t{{.Size}}'  | grep "$2"
echo ""
echo "    $(docker images --format 'table {{.CreatedSince}}\t{{.Repository}}:{{.Tag}}\t{{.Size}}' | tail -n +2 | wc -l) Imagenes en total"
echo ""
exit
fi


if [ "$1" = "install" ] && [ "$2" = "ubuntu" ]
then
sudo apt update
sudo apt -y install apt-transport-https ca-certificates curl gnupg2 software-properties-common
sudo curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -

sudo add-apt-repository \
        "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"

sudo apt update
sudo apt -y install docker-ce
sudo systemctl enable docker
sudo systemctl start docker


sudo groupadd docker

echo -en "    Escribe el nombre de usuario para gestionar docker: "
read USUARIO
sudo usermod -aG docker $USUARIO

sudo apt install python3-pip
sudo pip3 install docker-compose
clear
docker -v
docker-compose -v
exit
fi



if [ "$1" = "install" ] && [ "$2" = "debian" ]
then
sudo apt update
sudo apt -y install apt-transport-https ca-certificates curl gnupg2 software-properties-common
sudo curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
 sudo add-apt-repository \
	    "deb [arch=amd64] https://download.docker.com/linux/debian \
$(lsb_release -cs) \
stable"
sudo apt update
sudo apt -y install docker-ce
sudo systemctl enable docker
sudo systemctl start docker


sudo groupadd docker

echo -en "    Escribe el nombre de usuario para gestionar docker: "
read USUARIO
sudo usermod -aG docker $USUARIO

sudo apt install python3-pip
sudo pip3 install docker-compose
clear
docker -v
docker-compose -v
exit
fi

if [ "$1" = "install" ] && [ "$2" = "arm64" ]
then
sudo apt update
sudo apt -y install apt-transport-https ca-certificates curl gnupg2 software-properties-common
sudo curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -

sudo add-apt-repository \
        "deb [arch=arm64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"

sudo apt update
sudo apt -y install docker-ce
sudo systemctl enable docker
sudo systemctl start docker


sudo groupadd docker

echo -en "    Escribe el nombre de usuario para gestionar docker: "
read USUARIO
sudo usermod -aG docker $USUARIO

sudo apt install python3-pip
sudo pip3 install docker-compose
clear
docker -v
docker-compose -v
exit
fi


if [ "$1" = "install" ] && [ "$2" = "armhf" ]
then
sudo apt update
sudo apt install apt-transport-https ca-certificates curl gnupg2 software-properties-common
sudo curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg | sudo apt-key add -
sudo echo "deb [arch=armhf] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") \
     $(lsb_release -cs) stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list
sudo apt update
sudo apt install docker-ce
sudo systemctl enable docker
sudo systemctl start docker

sudo groupadd docker

echo -en "    Escribe el nombre de usuario para gestionar docker: "
read USUARIO
sudo usermod -aG docker $USUARIO

sudo apt install python3-pip
sudo pip3 install docker-compose
clear
docker -v
docker-compose -v
exit
fi

if [ "$1" = "install" ]
then
sudo apt update
sudo apt upgrade

sudo apt update
sudo apt install docker.io

sudo systemctl enable docker
sudo systemctl start docker

sudo groupadd docker

echo -en "    Escribe el nombre de usuario para gestionar docker: "
read USUARIO
sudo usermod -aG docker $USUARIO

sudo apt install python3-pip
sudo pip3 install docker-compose
clear
docker -v
docker-compose -v
exit
fi


if [ "$1" = "dc" ]
then
docker-compose up -d
exit
fi

if [ "$1" = "dc" ] && [ "$2" = "d" ] || [ "$1" = "dcd" ]
then
docker-compose down
exit
fi

if [ "$1" = "dcvl" ]
then
docker-compose down -v
exit
fi


if [ "$1" = "dcl" ] 
then
docker-compose logs -f -t | grep "$2"
exit
fi

if [ "$1" = "dcrm" ]
then
docker-compose rm
exit
fi


if [ "$1" = "net" ] || [ "$1" = "red" ]
then
echo "--------"
echo " REDES "
echo "--------"
docker network ls  | grep "$2"
echo ""
exit
fi


if [ "$1" = "ip" ] && [ "$2" = "-a" ] || [ "$1" = "ls" ] && [ "$2" = "ip" ]
then
clear
echo "----------------"
echo "CONTAINERS IP's"    
echo "----------------"   
docker inspect -f '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq) 
exit
fi

if [ "$1" = "list" ] && [ "$2" = "ip" ]
then
clear
echo "----------------"
echo "CONTAINERS IP's"    
echo "----------------"  
docker ps -q | xargs -n 1 docker inspect --format '{{range .NetworkSettings.Networks}} - {{.IPAddress}}{{end}} {{ .Name }}' 
exit
fi

if [ "$1" = "ls" ] && [ "$2" = "-a" ] || [ "$1" = "ps" ] && [ "$2" = "-a" ] 
then    
echo "----------------------"
echo "CONTAINERS DISPONIBLES"
echo "----------------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' | sort | sed '/^ *#/d; /^ *$/d' | nl 2>/dev/null
echo ""
exit
fi

if [ "$1" = "ls" ] || [ "$1" = "ps" ]  
then
echo "----------------------------------"
echo "CONTAINERS CORRIENDO Y SUS PUERTOS"    
echo "----------------------------------"
docker ps --format 'table {{.Names}}\t{{.Ports}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl | grep "$2" 2>/dev/null
echo ""
exit
fi

if [ "$1" = "u" ] || [ "$1" = "start" ] || [ "$1" = "up" ]
then
echo "----------------------"
echo "CONTAINERS DISPONIBLES"    
echo "----------------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl | grep "$2" 2>/dev/null
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dk/up.dk
echo ""
echo -en "    Selecciona el número de contenedor que quieres iniciar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dk/up.dk | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Contenedor $(docker start "$CONTENEDORUP") iniciado"
echo ""
exit
fi


if [ "$1" = "r" ] || [ "$1" = "restart" ] 
then
echo "----------------------"
echo "CONTAINERS DISPONIBLES"    
echo "----------------------"
docker ps --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl  | grep "$2" 2>/dev/null
docker ps --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dk/restart.dk
echo ""
echo -en "    Selecciona el número de contenedor que quieres reiniciar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dk/restart.dk | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Contenedor $(docker restart "$CONTENEDORUP") reiniciando"
echo ""
exit
fi




if [ "$1" = "d" ] && [ "$2" = "-a" ] || [ "$1" = "stop" ] && [ "$2" = "-a" ] || [ "$1" = "down" ] && [ "$2" = "-a" ] 
then    
docker stop $(docker ps -q)
exit
fi


if [ "$1" = "d" ] || [ "$1" = "stop" ] || [ "$1" = "down" ] 
then
echo "--------------------"
echo "CONTAINERS CORRIENDO"    
echo "--------------------"
docker ps --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl  | grep "$2" 2>/dev/null
docker ps --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dk/down.dk
echo ""
echo -en "    Selecciona el número de contenedor que quieres detener: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dk/down.dk | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Detenido el contenedor $(docker stop "$CONTENEDORUP")"
echo ""
exit
fi

if [ "$1" = "rm" ]
then
echo "------------------"
echo "BORRAR CONTAINERS "
echo "------------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl  | grep "$2" 2>/dev/null
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dk/remove.dk
echo ""
echo -en "    Selecciona el número de contenedor que quieres borrar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dk/remove.dk | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Borrado el contenedor $(docker rm "$CONTENEDORUP")"
echo ""
exit
fi

if [ "$1" = "drm" ]
then
echo "------------------"
echo "BORRAR CONTAINERS "
echo "------------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl  | grep "$2" 2>/dev/null
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dk/remove.dk
echo ""
echo -en "    Selecciona el número de contenedor que quieres borrar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dk/remove.dk | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Detenido el contenedor $(docker stop "$CONTENEDORUP")"
echo ""
echo "    Borrado el contenedor $(docker rm "$CONTENEDORUP")"
echo ""
exit
fi



if [ "$1" = "ip" ]
then
echo "----------------------"
echo "CONTAINERS DISPONIBLES"    
echo "----------------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl | grep "$2" 2>/dev/null
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dk/ip.dk
echo ""
echo -en "    Selecciona el número de contenedor que quieres reiniciar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dk/ip.dk | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Ip Contenedor $CONTENEDORUP = $(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$CONTENEDORUP")"
echo ""
exit
fi


if [ "$1" = "log" ] ||  [ "$1" = "l" ]
then
echo "---------------"
echo "log CONTAINERS "
echo "---------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl  | grep "$2" 2>/dev/null
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dk/logs.dk
echo ""
echo -en "    Selecciona el número de contenedor que quieres ver los logs: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dk/logs.dk | sed -n ""$CONTENEDOR""p)
echo ""
echo "    log del contenedor $(docker logs -f "$CONTENEDORUP")"
echo ""
exit
fi

if [ "$1" = "exec" ] ||  [ "$1" = "e" ]
then
echo "--------------------------------------------"
echo "Entrar o ejecutar un comando del contenedor "
echo "--------------------------------------------"
docker ps --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl  | grep "$2" 2>/dev/null
docker ps --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dk/exec.dk
echo ""
echo -en "    Selecciona el número del contenedor que quieres entrar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dk/exec.dk | sed -n ""$CONTENEDOR""p)
echo ""
docker exec -it "$CONTENEDORUP" sh
echo ""
exit
fi

if [ "$1" = "execb" ] ||  [ "$1" = "eb" ]
then
echo "--------------------------------------------"
echo "Entrar o ejecutar un comando del contenedor "
echo "--------------------------------------------"
docker ps --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl  | grep "$2" 2>/dev/null
docker ps --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dk/exec.dk
echo ""
echo -en "    Selecciona el número del contenedor que quieres entrar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dk/exec.dk | sed -n ""$CONTENEDOR""p)
echo ""
docker exec -it "$CONTENEDORUP" bash
echo ""
exit
fi



if [ "$1" = "rmi" ]
then
echo "----------------"
echo "BORRAR IMAGENES "
echo "----------------"
docker images --format 'table {{.Repository}}:{{.Tag}}\t{{.Size}}' | tail -n +2 | nl  | grep "$2" 2>/dev/null
docker images --format 'table {{.Repository}}:{{.Tag}}' | tail -n +2 > ~/.config/dk/image.dk
echo ""
echo -en "    Selecciona el número de la imagen que deseas borrar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dk/image.dk | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Borrada la imagen $(docker rmi "$CONTENEDORUP")"
echo ""
exit
fi

if [ "$1" = "rc" ] 
then
echo "----------------------"
echo "CONTAINERS DISPONIBLES"    
echo "----------------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl | grep "$2" 2>/dev/null
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dk/up.dk
echo ""
echo -en "    Selecciona el número de contenedor que quieres cambiar el nombre: " ; read CONTENEDOR
echo -en "    ¿Que nombre quieres utilizar? " ; read NUEVO_NOMBRE
CONTENEDORUP=$(cat ~/.config/dk/up.dk | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Contenedor renombrado $(docker rename "$CONTENEDORUP" "$NUEVO_NOMBRE")"
echo ""
exit
fi



if [ "$1" = "ri" ]
then
echo "----------"
echo " IMAGENES "
echo "----------"
docker images --format 'table {{.Repository}}:{{.Tag}}\t{{.Size}}' | tail -n +2 | nl | grep "$2" 2>/dev/null
docker images --format 'table {{.Repository}}:{{.Tag}}' | tail -n +2 > ~/.config/dk/image.dk
echo ""
echo -en "    Selecciona el número de la imagen que deseas cambiar el nombre: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dk/image.dk | sed -n ""$CONTENEDOR""p)
echo ""
echo -en "    Introduce el nuevo nombre de imagen: "
read NOMBRE
echo "          Imagen renombrada $(docker tag "$CONTENEDORUP" "$NOMBRE")"
echo ""
exit
fi





if [ "$1" = "stats" ] && [ "$2" = "sort" ] || [ "$1" = "ss" ]
then
echo "-----------------------------"
echo "Ordenar por Contenedores por:"
echo "-----------------------------"
echo ""
echo -e " 1 NOMBRE\n 2 CPU\n 3 MEMORIA\n 4 TRAFICO\n"
echo -en "  Selecciona el número por el orden que desees: "
read NUM
echo -en "  Pon r, si quieres que esté ordenado de Mayor a menor:  "
read ORD
echo "NOMBRE              CPU %               MEM %               TRAFICO ENTRADA/SALIDA"
docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemPerc}}\t{{.NetIO}}"  | tail -n +2 | sort -nk"$NUM""$ORD"
exit
fi


if [ "$1" = "stats" ] && [ "$2" = "c" ] || [ "$1" = "s" ] && [ "$2" = "c" ]
then
echo "---------------"
echo "log CONTAINERS "
echo "---------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl  | grep "$3" 2>/dev/null
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dk/stats.dk
echo ""
echo -en "    Selecciona el número de contenedor que quieres ver su cpu, memoria, ... "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dk/stats.dk | sed -n ""$CONTENEDOR""p)
docker stats --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemPerc}}\t{{.NetIO}}" "$CONTENEDORUP"
exit
fi

if [ "$1" = "statsp" ] || [ "$1" = "sp" ] 
then
docker stats --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemPerc}}\t{{.NetIO}}"
exit
fi

if [ "$1" = "stats" ] || [ "$1" = "s" ] 
then
docker stats --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t\t{{.NetIO}}"
exit
fi

if [ "$1" = "p" ] || [ "$1" = "prune" ]  
then
docker system prune
exit
fi

if [ "$1" = "dcn" ] 
then
clear
echo ""
echo   " Vamos a crear un nuevo docker-compose. "
echo -n " Introduce el nombre: "  ; read GRUPO

mkdir -p $RUTA_DOCKER_DOTFILE/$GRUPO/
clear
echo  " "
echo -en "Versión             : " ; read  VERSION
echo -en "Nombre de contenedor: " ; read  NOMBRE
echo -en "Imagen:               " ; read  IMAGEN
echo -en "puertos:              " ; read  PORTS
echo -en "volumenes:            " ; read  VOLUMES
echo -en "Variables :           " ; read  VARIABLES

echo "version: '$VERSION'                " >> $RUTA_DOCKER_DOTFILE/$GRUPO/docker-compose.yml
echo "services:                          " >> $RUTA_DOCKER_DOTFILE/$GRUPO/docker-compose.yml
echo "  $NOMBRE:                         " >> $RUTA_DOCKER_DOTFILE/$GRUPO/docker-compose.yml
echo "    container_name: $NOMBRE        " >> $RUTA_DOCKER_DOTFILE/$GRUPO/docker-compose.yml
echo "    image: $IMAGEN                 " >> $RUTA_DOCKER_DOTFILE/$GRUPO/docker-compose.yml
echo "    ports:                         " >> $RUTA_DOCKER_DOTFILE/$GRUPO/docker-compose.yml
echo "      - '$PORTS:$PORTS'            " >> $RUTA_DOCKER_DOTFILE/$GRUPO/docker-compose.yml
echo "    volumes:                       " >> $RUTA_DOCKER_DOTFILE/$GRUPO/docker-compose.yml
echo "      - '$VOLUMES'                 " >> $RUTA_DOCKER_DOTFILE/$GRUPO/docker-compose.yml
echo "    environment:                   " >> $RUTA_DOCKER_DOTFILE/$GRUPO/docker-compose.yml
echo "      - '$VARIABLES'               " >> $RUTA_DOCKER_DOTFILE/$GRUPO/docker-compose.yml

echo "$RUTA_DOCKER_DOTFILE/$GRUPO/docker-compose.yml"
$EDITOR $RUTA_DOCKER_DOTFILE/$GRUPO/docker-compose.yml
clear
echo "El docker $NOMBRE ha sido guardado con éxito!!!"
exit
fi

if [ "$1" = "cliv" ] 
then
clear
echo ""
echo "---------------------------------------"
echo "Listado de grupo de dockers disponibles"
echo "---------------------------------------"
echo ""
ls -1F $RUTA_DOCKER_DOTFILE/dockers/ | grep '/$' | sed s'|/||'g | nl
echo ""
echo -n "Selecciona el número de grupo de dockers deseado: " ; read NUMGRUPO
echo " "
GRUPO=$(ls -1F  $RUTA_DOCKER_DOTFILE/dockers/ | grep '/$' | sed s'|/||'g | sed -n ""$NUMGRUPO""p)

clear
echo ""
echo "-----------------------------------"
echo "Listado de contenedores disponibles"
echo "-----------------------------------"
echo ""
ls -1 $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/*.docker | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/dockers/$GRUPO'/||'g | nl

echo " "
echo -n "  Escribe el número de docker que deseas ver: " ; read NUMDOCKER
GRUPO=$(ls -1F  $RUTA_DOCKER_DOTFILE/dockers/ | grep '/$' | sed s'|/||'g | sed -n ""$NUMGRUPO""p)
DOCKER=$(ls -1 $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/*.docker | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/dockers/$GRUPO'/||'g  | sed -n ""$NUMDOCKER""p)
clear
echo ""
echo "Contenedor "$DOCKER""
echo "-------------------"
echo " "
echo " "
cat $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/$DOCKER.docker
echo " "
echo " "
echo "-------------------"
echo " "
exit
fi




if [ "$1" = "save" ] 
then
echo "----------------"
echo " GUARDAR IMÁGEN "
echo "----------------"
docker images --format 'table {{.Repository}}:{{.Tag}}\t{{.Size}}' | tail -n +2 | nl | grep "$2" 2>/dev/null
docker images --format 'table {{.Repository}}:{{.Tag}}' | tail -n +2 > ~/.config/dk/image.dk
echo ""
echo -en "    Selecciona el número de la imagen que deseas guardar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dk/image.dk | sed -n ""$CONTENEDOR""p)
echo ""
echo     "    Guardando la imágen $CONTENEDORUP... Espere"    
echo ""
echo "    Imagen $CONTENEDORUP, Guardada  $(docker save "$CONTENEDORUP" >  "$(echo $CONTENEDORUP | sed s'|/|-|'g)_$(date +"%Y%m%d")_docker".tar)"
echo ""
exit
fi

if [ "$1" = "load" ] 
then
clear
echo ""
echo "-------------------------------"
echo "Listado de Imágenes disponibles"
echo "-------------------------------"
echo ""
ls -1F $PWD  | nl | grep "$2"  2>/dev/null
ls -1F $PWD > ~/.config/dk/image.dk
echo ""
echo -en "    Selecciona el número de la imagen cargar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dk/image.dk | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Imagen Cargada $(docker load <  "$CONTENEDORUP")"
echo ""
exit
fi

if [ "$1" = "dcr" ] 
then
clear
echo ""
echo "---------------------------------------"
echo "Listado de docker-compose disponibles"
echo "---------------------------------------"
echo ""
ls -1F $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | nl | grep "$2"
echo ""
echo -n "Selecciona del docker-compose deseado: " ; read NUMGRUPO
echo " "
GRUPO=$(ls -1F  $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | sed -n ""$NUMGRUPO""p)

clear
echo ""
echo "----------------------------------------------"
echo "Listado de archivos docker-compose disponibles"
echo "----------------------------------------------"
echo ""

ls -1 $RUTA_DOCKER_DOTFILE/$GRUPO/*.yml | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/$GRUPO'/||'g | nl 
echo " "

echo    "  Escribe el número del archivo que deseas montar " 
echo -n "  Por defecto es 'docker-compose'                  " ; read NUMDOCKER
DOCKER=$(ls -1 $RUTA_DOCKER_DOTFILE/$GRUPO/*.yml | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/$GRUPO'/||'g  | sed -n ""$NUMDOCKER""p)


$EDITOR $RUTA_DOCKER_DOTFILE/$GRUPO/$DOCKER.yml
clear
echo "Creando el Contenedor "$DOCKER"..."
echo " "

docker-compose -f $RUTA_DOCKER_DOTFILE/$GRUPO/$DOCKER.yml up  -d
exit
fi


if [ "$1" = "dcv" ] 
then
clear
echo ""
echo "---------------------------------------"
echo "Listado de docker-compose disponibles"
echo "---------------------------------------"
echo ""
ls -1F $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | nl | grep "$2"
echo ""
echo -n "Selecciona del docker-compose deseado: " ; read NUMGRUPO
echo " "
GRUPO=$(ls -1F  $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | sed -n ""$NUMGRUPO""p)

clear
echo ""
echo "----------------------------------------------"
echo "Listado de archivos docker-compose disponibles"
echo "----------------------------------------------"
echo ""

ls -1 $RUTA_DOCKER_DOTFILE/$GRUPO/*.yml | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/$GRUPO'/||'g | nl 
echo " "

echo    "  Escribe el número del archivo que deseas montar " 
echo -n "  Por defecto es 'docker-compose'                  " ; read NUMDOCKER
DOCKER=$(ls -1 $RUTA_DOCKER_DOTFILE/$GRUPO/*.yml | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/$GRUPO'/||'g  | sed -n ""$NUMDOCKER""p)

clear

cat $RUTA_DOCKER_DOTFILE/$GRUPO/$DOCKER.yml


echo -n "¿Quieres editarlo?: [si/no] " ; read RESPUESTA
if [ "$RESPUESTA" = "SI" ] || [ "$RESPUESTA" = "S" ] || [ "$RESPUESTA" = "si" ] || [ "$RESPUESTA" = "s" ]
then
$EDITOR $RUTA_DOCKER_DOTFILE/$GRUPO/$DOCKER.yml
clear
fi


echo -n "¿Quieres Levantar el docker-compose?: [si/no] " ; read RESPUESTA
if [ "$RESPUESTA" = "SI" ] || [ "$RESPUESTA" = "S" ] || [ "$RESPUESTA" = "si" ] || [ "$RESPUESTA" = "s" ]
then
clear    
docker-compose -f $RUTA_DOCKER_DOTFILE/$GRUPO/$DOCKER.yml up  -d
fi

exit
fi



if [ "$1" = "dccp" ] 
then
clear
echo ""
echo "---------------------------------------"
echo "Listado de docker-compose disponibles"
echo "---------------------------------------"
echo ""
ls -1F $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | nl | grep "$2"
echo ""
echo -n "Selecciona del docker-compose deseado: " ; read NUMGRUPO
echo " "
GRUPO=$(ls -1F  $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | sed -n ""$NUMGRUPO""p)

clear
echo ""
echo "----------------------------------------------------------"
echo "Listado de archivos docker-compose disponibles para copiar"
echo "----------------------------------------------------------"
echo ""

ls -1 $RUTA_DOCKER_DOTFILE/$GRUPO/*.yml | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/$GRUPO'/||'g | nl 
echo " "

echo    "  Escribe el número que deseas ver " 
echo -n "  Por defecto es 'docker-compose' " ; read NUMDOCKER
DOCKER=$(ls -1 $RUTA_DOCKER_DOTFILE/$GRUPO/*.yml | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/$GRUPO'/||'g  | sed -n ""$NUMDOCKER""p)

clear

cat $RUTA_DOCKER_DOTFILE/$GRUPO/$DOCKER.yml


echo -n "¿Quieres copiarlo?: [si/no] " ; read RESPUESTA
if [ "$RESPUESTA" = "SI" ] || [ "$RESPUESTA" = "S" ] || [ "$RESPUESTA" = "si" ] || [ "$RESPUESTA" = "s" ]
then

echo -n "  Que nombre quieres dar al nuevo 'docker-compose'" ; read NUEVODOCKER
cp $RUTA_DOCKER_DOTFILE/$GRUPO/$DOCKER.yml   $RUTA_DOCKER_DOTFILE/$GRUPO/$NUEVODOCKER.yml
clear
fi

echo -n "¿Quieres editarlo?: [si/no] " ; read RESPUESTA
if [ "$RESPUESTA" = "SI" ] || [ "$RESPUESTA" = "S" ] || [ "$RESPUESTA" = "si" ] || [ "$RESPUESTA" = "s" ]
then
$EDITOR $RUTA_DOCKER_DOTFILE/$GRUPO/$NUEVODOCKER.yml
clear
fi


echo -n "¿Quieres Levantar el docker-compose?: [si/no] " ; read RESPUESTA
if [ "$RESPUESTA" = "SI" ] || [ "$RESPUESTA" = "S" ] || [ "$RESPUESTA" = "si" ] || [ "$RESPUESTA" = "s" ]
then
clear    
docker-compose -f $RUTA_DOCKER_DOTFILE/$GRUPO/$NUEVODOCKER.yml up  -d
fi



exit
fi



if [ "$1" = "dcrrm" ] 
then
clear
echo ""
echo "---------------------------------------"
echo "Listado de docker-compose disponibles"
echo "---------------------------------------"
echo ""
ls -1F $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | nl | grep "$2"
echo ""
echo -n "Selecciona del docker-compose deseado: " ; read NUMGRUPO
echo " "
GRUPO=$(ls -1F  $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | sed -n ""$NUMGRUPO""p)

clear

echo -n "¿Estas seguro que quieres borrar este docker compose?: [si/no] " ; read RESPUESTA
if [ "$RESPUESTA" = "SI" ] || [ "$RESPUESTA" = "S" ] || [ "$RESPUESTA" = "si" ] || [ "$RESPUESTA" = "s" ]
then
rm -Rf $RUTA_DOCKER_DOTFILE/$GRUPO/
clear
fi

exit
fi




if [ "$1" = "dcdr" ] 
then

clear
echo ""
echo "-------------------------------------"
echo "Listado de docker-compose disponibles"
echo "-------------------------------------"
echo ""
ls -1F $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | nl | grep "$2"
echo ""
echo -n "Selecciona el número del docker-compose que deseas: " ; read NUMGRUPO
echo " "
GRUPO=$(ls -1F  $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | sed -n ""$NUMGRUPO""p)

clear
echo ""
echo "----------------------------------------------"
echo "Listado de archivos docker-compose disponibles"
echo "----------------------------------------------"
echo ""

ls -1 $RUTA_DOCKER_DOTFILE/$GRUPO/*.yml | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/$GRUPO'/||'g | nl 
echo " "

echo    "  Escribe el número de archivo de docker-compose que deseas detener: " 
echo -n "  Por defecto es 'docker-compose'                  " ; read NUMDOCKER

DOCKER=$(ls -1 $RUTA_DOCKER_DOTFILE/$GRUPO/*.yml | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/$GRUPO'/||'g  | sed -n ""$NUMDOCKER""p)

docker-compose -f $RUTA_DOCKER_DOTFILE/$GRUPO/$DOCKER.yml down
exit
fi

if [ "$1" = "not" ]
then

if [ ! -f  ~/.config/dk/$2.not ]; then
				touch ~/.config/dk/$2.not
		fi


CONTENEDORES_RUN=$(docker ps --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d'  2>/dev/null)
ESTADO=$(diff ~/.config/dk/$2.not <(echo "$CONTENEDORES_RUN"))

if [ "$(echo "$ESTADO" | grep ">")" != "" ] ; then
		echo "$2 Contenedor levantado"
		echo "-----------------------"
		echo "$ESTADO" | grep ">" | sed s'|>||'g
echo "$CONTENEDORES_RUN" > ~/.config/dk/$2.not

fi

if [ "$(echo "$ESTADO" | grep "<")" != "" ] ; then
		echo "$2 Contenedor detenido"
		echo "----------------------"
		echo "$ESTADO" | grep "<" | sed s'|<||'g
echo "$CONTENEDORES_RUN" > ~/.config/dk/$2.not

fi
exit
fi


if [ "$1" = "clin" ]
then
clear
echo ""
echo "Vamos a guardar un nuevo docker."
echo ""
echo "---------------------------------------"
echo "Listado de grupo de dockers disponibles"
echo "---------------------------------------"
echo ""
ls -1F $RUTA_DOCKER_DOTFILE/dockers/ | grep '/$' | sed s'|/||'g | nl
echo ""
echo ""

echo -n " ¿A que grupo pertenece?: "  ; read NUMGRUPO
GRUPO=$(ls -1F  $RUTA_DOCKER_DOTFILE/dockers | grep '/$' | sed s'|/||'g | sed -n ""$NUMGRUPO""p)
mkdir -p $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/
clear
echo  " "
echo -en "Nombre: " ;         read  NOMBRE
echo -en "Fecha: " ;          read  FECHA
echo -en "Tags: " ;           read  TAGS
echo -en "url: " ;            read  URL
echo -en "Notas: " ;          read  NOTES
echo -en "Usuario: " ;        read  USUARIO
echo -en "Contraseña: " ;     read  CONTRASENAS

echo "#                                 " >> $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/$NOMBRE.docker
echo "#   Name:         $NOMBRE         " >> $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/$NOMBRE.docker
echo "#   Date:         $FECHA          " >> $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/$NOMBRE.docker
echo "#   Tags:         $TAGS           " >> $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/$NOMBRE.docker
echo "#   url:          $URL            " >> $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/$NOMBRE.docker
echo "#                                 " >> $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/$NOMBRE.docker
echo "#   Notes:        $NOTES          " >> $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/$NOMBRE.docker
echo "#   User:         $USUARIO        " >> $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/$NOMBRE.docker
echo "#   Password:     $CONTRASENAS    " >> $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/$NOMBRE.docker
echo "#                                 " >> $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/$NOMBRE.docker
echo "$RUTA_DOCKER_DOTFILE/dockers$GRUPO/$NOMBRE.docker"
$EDITOR $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/$NOMBRE.docker
clear
echo "El docker $NOMBRE ha sido guardado con éxito!!!"
exit
fi


if [ "$1" = "cli" ]
then

mkdir -p $RUTA_DOCKER_DOTFILE/dockers/

    clear
    echo ""
    echo "---------------------------------------"
    echo "Listado de grupo de dockers disponibles"
    echo "---------------------------------------"
    echo ""
    ls -1F $RUTA_DOCKER_DOTFILE/dockers/ | grep '/$' | sed s'|/||'g | nl
    echo ""
    echo -n "Selecciona el número de grupo de dockers deseado: " ; read NUMGRUPO
    echo " "
    GRUPO=$(ls -1F  $RUTA_DOCKER_DOTFILE/dockers/ | grep '/$' | sed s'|/||'g | sed -n ""$NUMGRUPO""p)

    clear
    echo ""
    echo "-----------------------------------"
    echo "Listado de contenedores disponibles"
    echo "-----------------------------------"
    echo ""
    ls -1 $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/*.docker | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/dockers/$GRUPO'/||'g | nl
    echo " "

    echo -n "  Escribe el número de docker que deseas montar: " ; read NUMDOCKER
    DOCKER=$(ls -1 $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/*.docker | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/dockers/$GRUPO'/||'g  | sed -n ""$NUMDOCKER""p)

    $EDITOR $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/$DOCKER.docker
    clear
    echo "Creando el Contenedor "$DOCKER"..."
    echo " "
    /bin/bash $RUTA_DOCKER_DOTFILE/dockers/$GRUPO/$DOCKER.docker

    exit
    fi
    
    
if [ "$1" = "prompt" ]
then
        while true; do
            echo ""
            echo "< dk >"
        echo    "---------------------------------------------"
        echo -n ">> prompt: " ; read COMANDO
        echo    "---------------------------------------------"
        if [ "$COMANDO" = "q" ] ; then
                echo "Saliendo de dk..."
                exit
                fi
        if [ "$COMANDO" = "clear" ] ; then
                echo ""
                clear
            else
            dk $COMANDO
                fi

done
fi

